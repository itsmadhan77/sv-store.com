# E-Commerce Django Project Documentation

## Overview

This project is a simple e-commerce web application built with Django.  
It allows users to register, log in, browse products, manage a shopping cart, place orders with payment options (Cash on Delivery or Card), and view their order history.  
Admins can manage inventory and update order statuses.

---

## Features

- **User Registration & Login:** Secure authentication for customers.
- **Product Inventory:** Browse and view product details.
- **Shopping Cart:** Add, remove, and update product quantities.
- **Order Placement:** Place orders with COD or Card Payment.
- **Order History:** Users can view their previous orders.
- **Admin Dashboard:** Admins can view all orders, update order statuses, and manage inventory.
- **Order Status Update:** Admins can change order status (Pending, Shipped, Delivered) and see confirmation messages.

---

## Project Structure

```
e_commerce/
├── e_commerce/           # Django project settings
├── store/                # Main app: models, views, templates, urls
│   ├── migrations/
│   ├── templates/
│   │   └── store/
│   │       ├── admin_orders_view.html          -----default admin user name : MADHAN  ; password : 1234
│   │       ├── payments.html
│   │       └── ... (other templates)
│   ├── static/
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── forms.py
│   └── ...
├── manage.py
└── requirements.txt
```

---

## Main Components

### Models

- **User:** Django's built-in user model.
- **Inventory:** Stores product details.
- **Cart & CartItem:** Manages user carts and their items.
- **Order & OrderItem:** Stores orders and the products/quantities in each order.
- **Payment:** Stores payment details for each order.

### Views

- **User Views:** Registration, login, logout, cart management, order placement, order history.
- **Admin Views:** Inventory management, order management, order status updates.

### Templates

- **payments.html:** Payment page for users.
- **admin_orders_view.html:** Admin order management page.
- **Other templates:** For login, registration, inventory, cart, etc.

---

## Setup & Installation

1. **Clone the Repository**
    ```sh
    git clone <your-repo-url>
    cd e_commerce
    ```

2. **Create and Activate a Virtual Environment**
    ```sh
    python -m venv .venv
    .venv\Scripts\activate  # On Windows
    # or
    source .venv/bin/activate  # On Mac/Linux
    ```

3. **Install Dependencies**
    ```sh
    pip install -r requirements.txt
    ```
    If `requirements.txt` is missing, install Django manually:
    ```sh
    pip install django
    ```

4. **Apply Migrations**
    ```sh
    python manage.py makemigrations
    python manage.py migrate
    ```

5. **Create a Superuser (for admin access)**
    ```sh
    python manage.py createsuperuser
    ```

6. **Run the Development Server**
    ```sh
    python manage.py runserver
    ```
    Visit [http://127.0.0.1:8000/](http://127.0.0.1:8000/) in your browser.

---

## Usage

- **User:** Register, log in, browse products, add to cart, and place orders.
- **Admin:** Log in at `/admin/` or use the custom admin dashboard, manage inventory and orders, update order status.

---

## How Order Status Update Works

- Admin can update the status of any order from the admin orders page.
- After updating, a green "updated" message appears in the "Update Status" column for the updated order.

---

## Notes

- Card payment is simulated for demonstration only. **Do not use real card data.**
- For production, set `DEBUG = False` and configure allowed hosts and static files.
- Customize and extend as needed for your use case.

---

## License

This project is for educational/demo purposes.